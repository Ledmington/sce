plugins {
    id 'application'
}

// utility function
static def path(final String ...s) {
    return String.join(File.separator, s)
}

String fatJarBaseName = "${appNameLowerCase}-cli"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")
String mainClassName = "${basePackage}.Main"

dependencies {
    implementation project(':engine')
}

application {
    mainClass = mainClassName
}

run {
    args = []
    jvmArgs = [
            // "-ea",
            // "-esa",
            // "-XX:+TieredCompilation",
            // "-XX:+PrintCompilation"
    ]
}

// utility function
static def getDate() {
    return new Date().format('yyyyMMddHHmmss')
}

tasks.register('fatJar', Jar) {
    group 'distribution'
    description 'Builds the fat jar of the application'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = 'include'
    manifest {
        archiveBaseName = appNameLowerCase
        attributes(
                // "Implementation-Title": "Gradle",
                // "Implementation-Version": version,
                "Main-Class": "$mainClassName"
        )
    }
    archiveBaseName = "${fatJarBaseName}"

    doLast {
        printf "The fat jar is %s\n", fatJarPath
        printf "Fat jar size: %.3f MB\n", new File(fatJarPath).length() / 1_000_000L
    }
}

tasks.build.dependsOn(fatJar)
tasks.javadoc.enabled = false
